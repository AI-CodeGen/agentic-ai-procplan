from typing import Dict, List, Optional, Tuple
import time
import logging
from langchain_community.utilities.alpha_vantage import AlphaVantageAPIWrapper
from app.config import settings, llm
from app.agents.material_to_symbol_mapping import MATERIAL_TO_SYMBOL
from app.agents.av_commodity_map import ALPHA_VANTAGE_COMMODITIES
from app.agents.company_mapping import find_material_manufacturer
from langchain_core.prompts import ChatPromptTemplate

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Cache for storing prices
price_cache = {}
last_update_time = {}

# Cache for storing similarity mappings
similarity_cache = {}

# Cache for storing commodity mappings
commodity_mapping_cache = {}

# Cache for storing manufacturer mappings
manufacturer_mapping_cache = {}

# Rate limiting
RATE_LIMIT_DELAY = 12  # Alpha Vantage free tier allows 5 calls per minute
last_api_call = 0

def map_to_alpha_vantage_commodity(material: str) -> Tuple[Optional[str], Optional[str]]:
    """
    Maps a material to the closest Alpha Vantage supported commodity using LLM.
    Returns a tuple of (symbol, commodity_name) or (None, None) if no match found.
    """
    try:
        # Check cache first
        if material in commodity_mapping_cache:
            logger.info(f"Using cached commodity mapping for {material}: {commodity_mapping_cache[material]}")
            return commodity_mapping_cache[material]

        # Create prompt for commodity mapping
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are an expert in commodity markets and material science.
            Your task is to map a given material to the closest available commodity in the Alpha Vantage API.
            Return ONLY the exact commodity name from the provided list, nothing else.
            
            Available commodities and their symbols:
            {commodities}
            
            If no suitable match is found, return 'NONE'."""),
            ("human", "Map this material to the closest commodity: {material}")
        ])

        # Format commodities list for the prompt
        commodities_list = "\n".join([f"{symbol}: {name}" for symbol, name in ALPHA_VANTAGE_COMMODITIES.items()])
        
        # Create chain
        chain = prompt | llm
        
        # Get response
        response = chain.invoke({
            "material": material,
            "commodities": commodities_list
        })
        
        # Clean and validate response
        mapped_commodity = response.strip()
        logger.info(f"LLM response for {material}: {mapped_commodity}")
        
        # Find the symbol for the mapped commodity
        for symbol, name in ALPHA_VANTAGE_COMMODITIES.items():
            if name.lower() == mapped_commodity.lower():
                # Cache the result
                commodity_mapping_cache[material] = (symbol, name)
                logger.info(f"Mapped {material} to {name} ({symbol})")
                return symbol, name
        
        logger.warning(f"No suitable Alpha Vantage commodity found for {material}")
        return None, None
            
    except Exception as e:
        logger.error(f"Error mapping material to commodity for {material}: {str(e)}")
        return None, None

def find_similar_material(material: str) -> str:
    """Find a similar material from the mapping using LLM."""
    try:
        # Check cache first
        if material in similarity_cache:
            logger.info(f"Using cached similarity mapping for {material}: {similarity_cache[material]}")
            return similarity_cache[material]

        # Create prompt for similarity matching
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are an expert in material science and commodity markets.
            Given a material name, find the most similar material from the provided list.
            Return ONLY the exact material name from the list, nothing else.
            
            Available materials: {materials}"""),
            ("human", "Find the most similar material to: {material}")
        ])

        # Get list of available materials
        available_materials = list(MATERIAL_TO_SYMBOL.keys())
        logger.info(f"Available materials for matching: {available_materials}")
        
        # Create chain
        chain = prompt | llm
        
        # Get response
        response = chain.invoke({
            "material": material,
            "materials": ", ".join(available_materials)
        })
        
        # Clean and validate response
        similar_material = response.strip()
        logger.info(f"LLM response for {material}: {similar_material}")
        
        if similar_material in MATERIAL_TO_SYMBOL:
            # Cache the result
            similarity_cache[material] = similar_material
            logger.info(f"Found similar material for {material}: {similar_material}")
            return similar_material
        else:
            logger.warning(f"LLM returned invalid material name: {similar_material}")
            return None
            
    except Exception as e:
        logger.error(f"Error finding similar material for {material}: {str(e)}")
        return None

def get_market_prices(materials: List[str]) -> Dict[str, float]:
    global last_api_call
    try:
        current_time = time.time()
        prices = {}
        
        # Initialize Alpha Vantage wrapper
        logger.info(f"Initializing Alpha Vantage wrapper with API key: {settings.ALPHA_VANTAGE_API_KEY[:4]}...")
        alpha_vantage = AlphaVantageAPIWrapper(alphavantage_api_key=settings.ALPHA_VANTAGE_API_KEY)
        
        for material in materials:
            logger.info(f"\nProcessing material: {material}")
            
            # Check if we have a cached price that's still valid
            if (material in price_cache and 
                material in last_update_time and 
                current_time - last_update_time[material] < settings.CACHE_EXPIRY):
                prices[material] = price_cache[material]
                logger.info(f"Using cached price for {material}: ${price_cache[material]}")
                continue
            
            # First try to map to Alpha Vantage commodity
            symbol, commodity_name = map_to_alpha_vantage_commodity(material)
            
            # If no direct Alpha Vantage mapping, try to find a manufacturer
            if not symbol:
                logger.info(f"No direct Alpha Vantage mapping for {material}, looking for manufacturer")
                symbol, company_name = find_material_manufacturer(material, llm)
                if symbol:
                    logger.info(f"Found manufacturer {company_name} ({symbol}) for {material}")
            
            # If still no mapping found, try the existing symbol mapping
            if not symbol:
                symbol = MATERIAL_TO_SYMBOL.get(material)
                logger.info(f"Direct symbol mapping for {material}: {symbol}")
                
                # If still no mapping found, try similarity matching
                if not symbol:
                    logger.info(f"No direct mapping found for {material}, attempting similarity matching")
                    similar_material = find_similar_material(material)
                    if similar_material:
                        symbol = MATERIAL_TO_SYMBOL[similar_material]
                        logger.info(f"Using symbol {symbol} from similar material {similar_material}")
                    else:
                        logger.warning(f"No similar material found for {material}, using default price")
                        prices[material] = 100.0
                        continue
            
            try:
                # Rate limiting
                time_since_last_call = current_time - last_api_call
                if time_since_last_call < RATE_LIMIT_DELAY:
                    sleep_time = RATE_LIMIT_DELAY - time_since_last_call
                    logger.info(f"Rate limiting: sleeping for {sleep_time:.2f} seconds")
                    time.sleep(sleep_time)
                
                # Get the latest price data
                logger.info(f"Next Step, Fetching price for {material} using symbol - {symbol}")
                
                # Try different endpoints based on the symbol type
                if symbol.startswith('X'):  # Forex symbols (e.g., XAUUSD)
                    logger.info(f"Getting exchange rate for {symbol}")
                    data = alpha_vantage.get_currency_exchange_rate(from_currency=symbol[:3], to_currency='USD')
                    latest_price = float(data['5. Exchange Rate'])
                else:  # Stock or commodity symbols
                    logger.info(f"Getting quote for {symbol}")
                    data = alpha_vantage.get_quote(symbol=symbol)
                    if data and '05. price' in data:
                        latest_price = float(data['05. price'])
                        logger.info(f"Quote price for {symbol}: ${latest_price}")
                    else:
                        raise ValueError("No price data available")
                
                last_api_call = time.time()
                logger.info(f"API Response for {material}: ${latest_price}")
                
                prices[material] = latest_price
                
                # Update cache
                price_cache[material] = latest_price
                last_update_time[material] = current_time
                logger.info(f"Updated price for {material}: ${latest_price}")
                
            except Exception as e:
                logger.error(f"Error fetching price for {material}: {str(e)}")
                prices[material] = 100.0  # Default price on error
        
        return prices
        
    except Exception as e:
        logger.error(f"Error in get_market_prices: {str(e)}")
        # Return default prices in case of any error
        return {mat: 100.0 for mat in materials}
